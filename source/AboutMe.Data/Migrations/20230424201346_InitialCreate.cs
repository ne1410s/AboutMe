// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace AboutMe.Data.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Forecast",
                columns: table => new
                {
                    ForecastId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    DateTime = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: false),
                    Summary = table.Column<string>(type: "nvarchar(200)", maxLength: 200, nullable: false),
                    TemperatureC = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Forecast", x => x.ForecastId);
                });

            migrationBuilder.CreateTable(
                name: "Item",
                columns: table => new
                {
                    ItemId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    StandardPortionKg = table.Column<double>(type: "float", nullable: true),
                    KCalsPerKg = table.Column<double>(type: "float", nullable: true),
                    SpecificCarbs = table.Column<double>(type: "float", nullable: true),
                    SpecificSugars = table.Column<double>(type: "float", nullable: true),
                    SpecificFat = table.Column<double>(type: "float", nullable: true),
                    SpecificSaturates = table.Column<double>(type: "float", nullable: true),
                    SpecificProtein = table.Column<double>(type: "float", nullable: true),
                    SpecificFibre = table.Column<double>(type: "float", nullable: true),
                    SpecificSodium = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Item", x => x.ItemId);
                    table.CheckConstraint("CK_Item_KCalsPerKg_GreaterThanZero", "ISNULL([KCalsPerKg], 1) > 0");
                    table.CheckConstraint("CK_Item_Name_AtLeastThreeChars", "LEN([Name]) >= 3");
                    table.CheckConstraint("CK_Item_Name_Trimmed", "LTRIM(RTRIM([Name])) = [Name]");
                    table.CheckConstraint("CK_Item_SpecificCarbs_BetweenZeroAndOne", "[SpecificCarbs] IS NULL OR ([SpecificCarbs] >= 0 AND [SpecificCarbs] <= 1)");
                    table.CheckConstraint("CK_Item_SpecificFat_BetweenZeroAndOne", "[SpecificFat] IS NULL OR ([SpecificFat] >= 0 AND [SpecificFat] <= 1)");
                    table.CheckConstraint("CK_Item_SpecificFibre_BetweenZeroAndOne", "[SpecificFibre] IS NULL OR ([SpecificFibre] >= 0 AND [SpecificFibre] <= 1)");
                    table.CheckConstraint("CK_Item_SpecificProtein_BetweenZeroAndOne", "[SpecificProtein] IS NULL OR ([SpecificProtein] >= 0 AND [SpecificProtein] <= 1)");
                    table.CheckConstraint("CK_Item_SpecificSaturates_BetweenZeroAndOne", "[SpecificSaturates] IS NULL OR ([SpecificSaturates] >= 0 AND [SpecificSaturates] <= 1)");
                    table.CheckConstraint("CK_Item_SpecificSodium_BetweenZeroAndOne", "[SpecificSodium] IS NULL OR ([SpecificSodium] >= 0 AND [SpecificSodium] <= 1)");
                    table.CheckConstraint("CK_Item_SpecificSugars_BetweenZeroAndOne", "[SpecificSugars] IS NULL OR ([SpecificSugars] >= 0 AND [SpecificSugars] <= 1)");
                    table.CheckConstraint("CK_Item_StandardPortionKg_GreaterThanZero", "ISNULL([StandardPortionKg], 1) > 0");
                });

            migrationBuilder.CreateTable(
                name: "Recipe",
                columns: table => new
                {
                    RecipeId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Name = table.Column<string>(type: "nvarchar(255)", maxLength: 255, nullable: false),
                    StandardPortionKg = table.Column<double>(type: "float", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Recipe", x => x.RecipeId);
                    table.CheckConstraint("CK_Recipe_Name_AtLeastThreeChars", "LEN([Name]) >= 3");
                    table.CheckConstraint("CK_Recipe_Name_Trimmed", "LTRIM(RTRIM([Name])) = [Name]");
                    table.CheckConstraint("CK_Recipe_StandardPortionKg_GreaterThanZero", "ISNULL([StandardPortionKg], 1) > 0");
                });

            migrationBuilder.CreateTable(
                name: "Ingredient",
                columns: table => new
                {
                    IngredientId = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    AmountKg = table.Column<double>(type: "float", nullable: false),
                    ItemId = table.Column<int>(type: "int", nullable: false),
                    RecipeId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Ingredient", x => x.IngredientId);
                    table.CheckConstraint("CK_Ingredient_AmountKg_GreaterThanZero", "[AmountKg] > 0");
                    table.ForeignKey(
                        name: "FK_Ingredient_Item_ItemId",
                        column: x => x.ItemId,
                        principalTable: "Item",
                        principalColumn: "ItemId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Ingredient_Recipe_RecipeId",
                        column: x => x.RecipeId,
                        principalTable: "Recipe",
                        principalColumn: "RecipeId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Ingredient_RecipeId",
                table: "Ingredient",
                column: "RecipeId");

            migrationBuilder.CreateIndex(
                name: "UQ_Ingredient_ItemId_RecipeId",
                table: "Ingredient",
                columns: new[] { "ItemId", "RecipeId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "UQ_Item_Name",
                table: "Item",
                column: "Name",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "UQ_Recipe_Name",
                table: "Recipe",
                column: "Name",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Forecast");

            migrationBuilder.DropTable(
                name: "Ingredient");

            migrationBuilder.DropTable(
                name: "Item");

            migrationBuilder.DropTable(
                name: "Recipe");
        }
    }
}
