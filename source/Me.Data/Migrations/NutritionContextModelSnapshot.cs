// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Me.Data;

#nullable disable

namespace Me.Data.Migrations
{
    [DbContext(typeof(MeContext))]
    partial class NutritionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Me.Business.Features.Item.ItemModel", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<double?>("KCalsPerKg")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("SpecificCarbs")
                        .HasColumnType("float");

                    b.Property<double?>("SpecificFat")
                        .HasColumnType("float");

                    b.Property<double?>("SpecificFibre")
                        .HasColumnType("float");

                    b.Property<double?>("SpecificProtein")
                        .HasColumnType("float");

                    b.Property<double?>("SpecificSaturates")
                        .HasColumnType("float");

                    b.Property<double?>("SpecificSodium")
                        .HasColumnType("float");

                    b.Property<double?>("SpecificSugars")
                        .HasColumnType("float");

                    b.Property<double?>("StandardPortionKg")
                        .HasColumnType("float");

                    b.HasKey("ItemId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Item_Name");

                    b.ToTable("Item", null, t =>
                        {
                            t.HasCheckConstraint("CK_Item_KCalsPerKg_GreaterThanZero", "ISNULL([KCalsPerKg], 1) > 0");

                            t.HasCheckConstraint("CK_Item_Name_AtLeastThreeChars", "LEN([Name]) >= 3");

                            t.HasCheckConstraint("CK_Item_Name_Trimmed", "LTRIM(RTRIM([Name])) = [Name]");

                            t.HasCheckConstraint("CK_Item_SpecificCarbs_BetweenZeroAndOne", "[SpecificCarbs] IS NULL OR ([SpecificCarbs] >= 0 AND [SpecificCarbs] <= 1)");

                            t.HasCheckConstraint("CK_Item_SpecificFat_BetweenZeroAndOne", "[SpecificFat] IS NULL OR ([SpecificFat] >= 0 AND [SpecificFat] <= 1)");

                            t.HasCheckConstraint("CK_Item_SpecificFibre_BetweenZeroAndOne", "[SpecificFibre] IS NULL OR ([SpecificFibre] >= 0 AND [SpecificFibre] <= 1)");

                            t.HasCheckConstraint("CK_Item_SpecificProtein_BetweenZeroAndOne", "[SpecificProtein] IS NULL OR ([SpecificProtein] >= 0 AND [SpecificProtein] <= 1)");

                            t.HasCheckConstraint("CK_Item_SpecificSaturates_BetweenZeroAndOne", "[SpecificSaturates] IS NULL OR ([SpecificSaturates] >= 0 AND [SpecificSaturates] <= 1)");

                            t.HasCheckConstraint("CK_Item_SpecificSodium_BetweenZeroAndOne", "[SpecificSodium] IS NULL OR ([SpecificSodium] >= 0 AND [SpecificSodium] <= 1)");

                            t.HasCheckConstraint("CK_Item_SpecificSugars_BetweenZeroAndOne", "[SpecificSugars] IS NULL OR ([SpecificSugars] >= 0 AND [SpecificSugars] <= 1)");

                            t.HasCheckConstraint("CK_Item_StandardPortionKg_GreaterThanZero", "ISNULL([StandardPortionKg], 1) > 0");
                        });
                });

            modelBuilder.Entity("Me.Business.Features.Recipe.IngredientModel", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<double>("AmountKg")
                        .HasColumnType("float");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("IngredientId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("ItemId", "RecipeId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Ingredient_ItemId_RecipeId");

                    b.ToTable("Ingredient", null, t =>
                        {
                            t.HasCheckConstraint("CK_Ingredient_AmountKg_GreaterThanZero", "[AmountKg] > 0");
                        });
                });

            modelBuilder.Entity("Me.Business.Features.Recipe.RecipeModel", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("StandardPortionKg")
                        .HasColumnType("float");

                    b.HasKey("RecipeId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_Recipe_Name");

                    b.ToTable("Recipe", null, t =>
                        {
                            t.HasCheckConstraint("CK_Recipe_Name_AtLeastThreeChars", "LEN([Name]) >= 3");

                            t.HasCheckConstraint("CK_Recipe_Name_Trimmed", "LTRIM(RTRIM([Name])) = [Name]");

                            t.HasCheckConstraint("CK_Recipe_StandardPortionKg_GreaterThanZero", "ISNULL([StandardPortionKg], 1) > 0");
                        });
                });

            modelBuilder.Entity("Me.Business.Features.Recipe.IngredientModel", b =>
                {
                    b.HasOne("Me.Business.Features.Item.ItemModel", "Item")
                        .WithMany("Ingredients")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Me.Business.Features.Recipe.RecipeModel", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Me.Business.Features.Item.ItemModel", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("Me.Business.Features.Recipe.RecipeModel", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
